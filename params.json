{"name":"Hexastore","tagline":"A fast, pure javascript triple store implementation, also useful as a graph database.","body":"# Hexastore\r\n\r\n[![Travis](https://img.shields.io/travis/crubier/Hexastore.svg?style=flat-square)](https://travis-ci.org/crubier/Hexastore) [![npm](https://img.shields.io/npm/dm/hexastore.svg?style=flat-square)](https://www.npmjs.com/package/hexastore) [![npm](https://img.shields.io/npm/v/hexastore.svg?style=flat-square)](https://www.npmjs.com/package/hexastore) [![node](https://img.shields.io/node/v/hexastore.svg?style=flat-square)](https://www.npmjs.com/package/hexastore) [![Gemnasium](https://img.shields.io/gemnasium/crubier/Hexastore.svg?style=flat-square)](https://gemnasium.com/crubier/Hexastore) [![Coverage Status](https://img.shields.io/coveralls/crubier/Hexastore.svg?style=flat-square)](https://coveralls.io/r/crubier/Hexastore)\r\n\r\nA fast, pure javascript triple store implementation, also useful as a graph database. Works in any browser, with browserify or webpack. Early development, API is subject to changes.\r\n\r\nHexastore is based on [this research paper](http://karras.rutgers.edu/hexastore.pdf). It is a way to structure RDF data such that queries are really fast. However, as implemented here, it has a 6 fold increase in memory usage as compared to a naive implementation of a triple store.\r\n\r\n## Installation\r\n\r\nIt is pure JS, so nothing fancy, just:\r\n\r\n    npm install hexastore\r\n\r\n## Usage\r\n\r\n### Create a database\r\n\r\nJust require Hexastore, and then you can start creating stores everywhere !\r\n\r\n    var Hexastore = require('Hexastore');\r\n    var mydb = new Hexastore();\r\n\r\n### Add triples\r\n\r\nTo add a single triple\r\n\r\n    mydb.put([\"hexastore\",\"is\",\"awesome\"]);\r\n\r\nTo add a collection of triples\r\n\r\n    mydb.putAll([\r\n        [\"hexastore\",\"is\",\"nice\"],\r\n        [\"hexastore\",\"speed\",\"fast\"],\r\n        [\"javascript\",\"is\",\"nice\"]\r\n      ]);\r\n\r\nTo add triples represented as nested JS objects\r\n\r\n    mydb.addSPO({\r\n        hexastore:{is:{awesome:true,nice:true},speed:{fast:true}},\r\n        javascript:{is:{nice:true}}\r\n      });\r\n\r\nOr\r\n\r\n    mydb.addSOP({\r\n        hexastore:{awesome:{is:true},nice:{is:true},fast:{speed:true}},\r\n        javascript:{nice:{is:true}}\r\n      };)\r\n\r\nYou get it ? So basically you can use any of the 6 orderings of the hexastore :\r\n\r\n    mydb.addSPO(...);\r\n    mydb.addSOP(...);\r\n    mydb.addOSP(...);\r\n    mydb.addOPS(...);\r\n    mydb.addPSO(...);\r\n    mydb.addPOS(...);\r\n\r\n### Import and export\r\n\r\nDatabases are imported and exported as Subjects containing Predicates containing Objects containing Values (SPO ordering). Import and export can work on normal JSON files, or on Zipped \"data.json\" files.\r\n\r\n    db.import(\"Mydatabase\");    // Import \"Mydatabase.json\"\r\n    db.importZip(\"Mydatabase\"); // Import \"Mydatabase.zip\"\r\n    db.importNt(\"Mydatabase\");  // Import \"Mydatabase.nt\"\r\n\r\n    db.export(\"Mydatabase\");    // Export \"Mydatabase.json\"\r\n    db.exportZip(\"Mydatabase\"); // Export \"Mydatabase.zip\"\r\n    db.exportNt(\"Mydatabase\");  // Export \"Mydatabase.nt\"\r\n\r\n### Search\r\n\r\nSearching is **very** simple. Just query a set of triples, adding `[]` around variable names\r\n\r\n\r\n    var result = db.search([\r\n        [[\"what\"],\"is\",\"nice\"]\r\n      ]);\r\n    // result == [{what:hexastore},{what:javascript}]\r\n\r\nA bit more complex\r\n\r\n    var result = db.search([\r\n        [[\"what\"],\"is\",\"nice\"]\r\n        [[\"what\"],\"speed\",[\"howfast\"]]\r\n      ]);\r\n    // result == [{what:\"hexastore\",howfast:\"fast\"}]\r\n\r\nQueries are really fast, so don't hesitate to do complex queries.\r\n\r\n## Tests\r\n\r\n    gulp test\r\n\r\n## Contributing\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}